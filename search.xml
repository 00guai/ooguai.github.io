<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript笔记</title>
      <link href="/2023/01/04/javascript%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/04/javascript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h2><p>在 HTML 页面中创建一个按钮，当点击该按钮时调用已定义的 compute 函数 。下列选项中，符合要求的一项是()</p><p>A. &lt; input onBlur&#x3D;”compute()” &gt;<br>B. &lt; input onFocus&#x3D;”compute()”&gt;<br>C. &lt; input onClick&#x3D;”function compute()” &gt;<br>D. &lt; input onClick&#x3D;”compute()” &gt;</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>选 D。考察的是 HTML DOM 事件允许 Javascript 在 HTML 文档元素中注册不同事件处理程序。<br>A 选择中的 onBlur 表示元素失去焦点时触发。所以 A 错误。<br>B 选择中的 onFocus 表示元素获取焦点时触发。所以 B 错误。<br>C 选择中的 onClick&#x3D;”function compute()”，function 关键字不属于对函数的调用，而是对函数的声明。所以 C 错误</p>              </div>            </details><hr><p>执行以下程序，下列说法中，正确的是（）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var arr = new Array(3); ...①<br><br>arr[0] = 1;<br><br>arr.b = 0;<br><br>console.log(arr.length); ...②<br><br>arr.forEach(value=>&#123;<br><br>        console.log(value); ...③<br><br>&#125;)<br><br>for(var i in arr)&#123;<br><br>      console.log(arr[i]); ...④<br><br>&#125;<br></code></pre></td></tr></table></figure><p>A<br>① 式创建一个长度为 3 的数组<br>B<br>② 式输出结果为 4<br>C<br>③ 式输出结果为 1 0<br>D<br>④ 式输出结果为 1</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>A 选项，当 new Array()括号内只有一个参数时，该参数表示数组的长度，A 正确；<br>B 选项，数组的长度仍为 3，这是因为 arr.b &#x3D; 0;实际上是为变量 arr 赋予属性 b，该属性不是数组元素，所以 arr.length 值不变，仍为 3；<br>C 选项，forEach 函数只遍历数组元素，由于 arr 数组的数组元素只有 1，因此输出结果为 1；<br>D 选项，for…in…会遍历数组以及数组的可枚举属性，因此输出结果为 1 0</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>数组</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>数组方法</p>            </div>              </div>            </details><hr><p>删除 arr 数组中的第 i 个元素的最好做法是？</p><p>①<br>arr.splice(i-1,1)<br>②<br>arr.slice(0,n).concat(arr.slice(n+1,arr.length));<br>③<br>Array.prototype.remove &#x3D; function(dx)　 {　　<br>if (isNaN(dx) || dx &gt; this.length) {<br>return false;<br>}　　<br>for (var i &#x3D; 0,<br>n &#x3D; 0; i &lt; this.length; i++)　　 {　　　　<br>if (this[i] !&#x3D; this[dx])　　　 {　　　　　　 this[n++] &#x3D; this[i]　　　　<br>}　　<br>}　　 this.length -&#x3D; 1 　<br>}<br>④<br>for (var i &#x3D; 0,<br>n &#x3D; 0; i &lt; this.length; i++)　　 {　　　　<br>if (this[i] !&#x3D; this[dx])　　　　 {　　　　　 this[n++] &#x3D; this[i]　　　　<br>}　　<br>}</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <blockquote><blockquote><p>arrayObject.splice(index,howmany,item1,…..,itemX)</p></blockquote></blockquote><p>splice() 方法向&#x2F;从数组中添加&#x2F;删除项目，然后返回被删除的项目。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td>howmany</td><td>必需。要删除的项目数量。如果设置为 0，则不会删除项目。</td></tr><tr><td>item1, …, itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>数组方法</p>            </div>              </div>            </details><hr><p>以下代码中,给 class 为 test 的 div 对象设置红色背景的正确 js 代码为( )</p><div class="test"></div><p>A<br>document.getElementsByClassName(“test”).style.backgroundColor&#x3D;”red”;<br>B<br>document.getElementsByClassName(“test”)[0].style.backgroundColor&#x3D;”red”;<br>C<br>document.getElementsByClassName(“test”)[0].style.background-color&#x3D;”red”;<br>D<br>document.getElementsByClassName(“test”).style.background-color&#x3D;”red”;</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>document.getElementsByClassName 返回一个数组，<br>需要挨个遍历数组，然后再 .style.backgroundColor &#x3D; ‘red’</p><p>document.getElementsByClassName()返回一个数组，由于该页面仅有一个 class&#x3D;test 的元素，所以通过[0]选择到该元素。通过 js 选择 css 属性时，属性都为驼峰的形式，所以为 style.backgroundColor</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>DOM</p>            </div>              </div>            </details><hr><p>代码 var foo &#x3D; “10”+3-“1”;console.log(foo);执行后，foo 的值为( )<br>A<br>“102”<br>B<br>102<br>C<br>12<br>D<br>“12”</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>① 为任意的数据类型+””即可将其转换成 String 字符串类型，这是一种隐式类型转换，由浏览器自动完成，实际上也是调用 String()函数。</p><p>② 为任意的数据类型 -0 即可将其转换成 Number 数值类型。<br>“103”-“1”&#x3D;102 答案 B</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>字符串和数字</p>            </div>              </div>            </details><hr><p>执行以下程序，输出结果为（）</p><p>var uname &#x3D; “window”;</p><p>var object &#x3D; {</p><pre><code>        uname :&quot;object&quot;,        fun:function()&#123;            console.log(this.uname);            return function()&#123;               console.log(this.uname);            &#125;        &#125;</code></pre><p>}</p><p>object.fun()();</p><p>A<br>object</p><p>B<br>window</p><p>C<br>object window</p><p>D<br>window object</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>object.fun()()等效于 var fn &#x3D; object.fun(); fn();实际上是调用函数两次，第一次是调用 object 对象的 fun 函数，第二次是调用 fun 函数的返回函数。第一次调用 fun 函数时，this 指向上一级对象，即 object 对象，因此输出对象 object 的 uname 属性值 object,第二次调用的返回函数，其 this 指向 window 对象，这是因为匿名函数具有全局性，匿名函数的 this 指向 window 对象，因此输出结果为 window 对象的 uname 属性值 window。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>对象</p>            </div>              </div>            </details><hr><p>以下结语句中，返回 true 的是？<br>A<br>!![]<br>B<br>1&#x3D;&#x3D;&#x3D;’1’<br>C<br>null&#x3D;&#x3D;&#x3D;undefined<br>D<br>!!’’</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>JavaScript 有五个基本类型：number、string、null 和 undefined。其中 null 和 undefined 以外，其他三个具有所谓的包装对象，可以通过内置构造函数 Number()、String()、Boolean()创建包装对象。 选项 A，javascript 中[]转化为布尔值为 true，即 Boolean([])返回 true，加上两个非符号返回仍为 true。 选项 B，&#x3D;&#x3D;&#x3D;表示等同符，当两边值类型相同时直接比较值，若类型不同返回 false。int 类型和 char 类型不同所以返回 false。 选项 C，null 表示空值，undefined 未定义，直接返回 false 选项 D，Boolean(‘’)返回 false，加上两个非符号，最终结果为 false。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>Javascript基础</p>            </div>              </div>            </details><hr><p>请问以下 JS 代码最后输出的 len 值是多少？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var len = 117;<br><br>let func = &#123;<br><br>len: 935,<br>showLen: function() &#123;<br><br>    console.log(this.len);<br><br>&#125;,<br>show: function() &#123;<br><br>    (function(cb) &#123;<br><br>      cb();<br>    &#125;)(this.showLen)<br><br>&#125;<br>&#125;<br>func.show();<br></code></pre></td></tr></table></figure><p>A<br>117<br>B<br>935<br>C<br>undefined<br>D<br>null</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">// 在 JavaScript 的函数中，this 始终指向调用者的上下文环境<br>var len = 117 // 5. 全局作用域中使用 var 定义的变量默认会成为 window 的属性，及 window.len<br><br>let func = &#123;<br><br>len: 935,<br>showLen: function () &#123;<br><br>    console.log(this.len) // 4. this 此时指向的是 window，所以相当于打印 window.len<br><br>&#125;,<br>show: function () &#123;<br><br>    (function (cb) &#123;<br><br>      cb() // 3. cb 相当于 cb.call() 默认没有传入上下文环境时 this 指向全局的 window 对象<br>    &#125;)(this.showLen) // 2. this 是 func 所以传入的是上面定义的 showLen 函数<br><br>&#125;<br>&#125;<br><br>func.show() // 1. 相当于 func.show.call(func)，此时 this 是 func<br>&#125;;<br></code></pre></td></tr></table></figure><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>立即执行函数</p>            </div>              </div>            </details><h2 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h2><p>执行以下程序，下列选项中，说法错误的是（）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">class Phone&#123;<br><br>  constructor(brand)&#123;<br>    <br>    this.brand = brand;<br>&#125;<br>  call()&#123;&#125;...①<br>&#125;<br>function playGame()&#123;console.log("我可以打游戏")&#125;;<br>function photo()&#123;console.log("我可以拍照")&#125;;<br>console.log(typeof Phone);...②<br>var p = new Phone(&#x27;华为&#x27;);<br>console.log(p.brand);...③<br></code></pre></td></tr></table></figure><p>A<br>①式的call方法是定义在类Phone的prototype对象上</p><p>B<br>②式输出结果为Object</p><p>C<br>③式输出结果为华为</p><p>D<br>若想一次性给类添加playGame和photo两个实例方法，可以使用Object.assign(Phone.prototype,{playGame,photo})</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>类的所有实例方法均定义在类的原型对象上，因此，在类内定义的实例方法和在类的原型对象上定义方法是等价的，call()是实例方法，故A选项说法正确，不符合题意；<br>类的本质是函数，实际上，ES6中的类可以视为ES5中构造函数的另一种写法，所以②式的输出结果为function而不是Object，B选项说法错误，符合题意；<br>p为类的实例对象，该对象有一个属性brand，属性值为华为，C选项说法正确，不符合题意；<br>Object.assign(target, source)可将source源对象所有可枚举的属性（或方法）分配给target对象，所以可以使用Object.assign(Phone.prototype,{playGame,photo})为类一次性添加playGame和photo两个实例方法，D选项说法正确，不符合题意。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>类</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>对象</p>            </div>              </div>            </details><hr><p>执行下列选项的程序，输出结果不是Window对象的是（）</p><p>A<br>setTimeout(function(){</p><p>console.log(this);<br>},1000);<br>B<br>function Star(){</p><p>console.log(this);</p><p>}</p><p>new Star();</p><p>C<br>var o &#x3D; {</p><p>sayHi:()&#x3D;&gt;{</p><p>console.log(this);</p><p>}<br>}<br>o.sayHi();</p><p>D<br>(function(){</p><p>console.log(this);</p><p>}());</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>在setTimeout()定时器中，this指向Window对象，A选项不符合题意；<br>通过new Star()来调用Star函数，由于使用new绑定，Star函数内部的this指向new创建的实例，而非Window对象，B选项符合题意；<br>箭头函数不会与this进行绑定，其this指向取决于该箭头函数同级作用域的this指向，又由于对象不能形成自己的作用域，因此其作用域为全局作用域，this指向Window对象，C选项不符合题意；<br>D选项，立即执行函数的this指向Window对象，D选项不符合题意。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>立即执行函数</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>定时器</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>箭头函数</p>            </div>              </div>            </details><hr><p>下列表达式中，返回值为true的是（）</p><p>①Object.is(NaN,NaN)</p><p>②Object.is(+0,-0)</p><p>③NaN &#x3D;&#x3D;&#x3D; NaN</p><p>④+0 &#x3D;&#x3D;&#x3D; -0</p><p>A<br>①④</p><p>B<br>①③</p><p>C<br>②③</p><p>D<br>②④</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>Object.is()与&#x3D;&#x3D;&#x3D;都是判断两个数是否严格相等。它们的区别主要在NaN自身和+0与-0的判断。<br>对于NaN自身的判断，Object.is(NaN,NaN)的返回结果为true，而NaN&#x3D;&#x3D;&#x3D;NaN的返回结果为false；<br>对于+0、-0的判断，Object.is(+0,-0)的返回结果为false，而+0&#x3D;&#x3D;&#x3D;-0的返回结果为true，故A选项正确。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>JavaScript基础</p>            </div>              </div>            </details><hr><p>console.log(([])?true:false);<br>console.log(([]&#x3D;&#x3D;false?true:false));<br>console.log(({}&#x3D;&#x3D;false)?true:false) </p><p>上面这段代码运行后得到的结果分别是什么？</p><p>A<br>false true true<br>B<br>true true true<br>C<br>true false true<br>D<br>true true false</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>《JavaScript权威指南》的部分相关知识点 “&#x3D;&#x3D;”运算符（两个操作数的类型不相同时） 如果一个值是null，另一个值是undefined，则它们相等 如果一个值是数字，另一个值是字符串，先将字符串转换为数学，然后使用转换后的值进行比较。 如果其中一个值是true，则将其转换为1再进行比较。如果其中的一个值是false，则将其转换为0再进行比较。 如果一个值是对象，另一个值是数字或字符串，则将对象转换为原始值，再进行比较。 对象到数字的转换 如果对象具有valueOf()方法，后者返回一个原始值，则JavaScript将这个原始值转换为数字（如果需要的话）并返回一个数字。 否则，如果对象具有toString()方法，后者返回一个原始值，则JavaScript将其转换并返回。（对象的toString()方法返回一个字符串直接量（作者所说的原始值），JavaScript将这个字符串转换为数字类型，并返回这个数字）。 否则，JavaScript抛出一个类型错误异常。 空数组转换为数字0 数组继承了默认的valueOf()方法，这个方法返回一个对象而不是一个原始值，因此，数组到数学的转换则调用toString()方法。空数组转换为空字符串，空字符串转换为数字0.</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>JavaScript基础</p>            </div>              </div>            </details><hr><p>下面一段JavaScript代码的运行结果是</p><p>var a,b;<br>(function(){<br>    alert(a);<br>    alert(b);<br>    var a&#x3D;b&#x3D;3;<br>    alert(a);<br>    alert(b);<br>})();<br>alert(a);<br>alert(b);</p><p>A<br>undefined，undefined，3,3，undefined，3<br>B<br>undefined，undefined，3,3，undefined，undefined<br>C<br>0，0，3,3，undefined，undefined<br>D<br>undefined，undefined，3,3，0，0</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>这道题中最重要的代码行是：var a&#x3D;b&#x3D;3;<br>赋值是从右往左进行的，也就是说这一行先执行b&#x3D;3，这时候b就是全局变量了，没有被var过。然后是var a &#x3D; b；<br>a被声明了，是局部变量。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>作用域</p>            </div>              </div>            </details><hr><p>已知arr &#x3D; [1,2,NaN,1,4,2,NaN]，现为输出arr的不重复元素（重复元素只输出一次），则下列程序中的①处，可以作为判断条件的是（）</p><p>var newArr &#x3D; [];<br>for(var i &#x3D; 0 ;i&lt;arr.length;i++){<br>  if(①){<br>    newArr.push(arr[i]);<br>  }<br>}<br>console.log(newArr);</p><p>A<br>newArr.indexOf(arr[i]) &#x3D;&#x3D; -1</p><p>B<br>!newArr.indexOf(arr[i]) &#x3D;&#x3D; -1</p><p>C<br>newArr.includes(arr[i])</p><p>D<br>!newArr.includes(arr[i])</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>indexOf()方法与includes()方法的一个重要区别在于indexOf()并不能判断数组的NaN元素，换句话说，不管数组arr是否有NaN元素，arr.indexOf(NaN)返回值都是-1，所以AB选项不能对NaN进行去重，不符合题意；<br>如果newArr数组不含有arr数组的某个元素，就应该把该元素添加到newArr数组中，如果含有，则不能添加，这样才能达到去重的目的，即newArr.includes(arr[i])返回值为false时，就应该执行if内的语句，所以应该使用“!”对条件取反，D选项符合题意，C选项不符合题意。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>数组方法</p>            </div>              </div>            </details><hr><p>执行以下程序，当用户在prompt输入框中输入0时，输出结果为（）</p><p>var num &#x3D; prompt(‘请输入分母:’)<br>try{<br>  console.log(‘a’);<br>  value &#x3D; 0 &#x2F; num;<br>  console.log(‘b’);<br>}<br>catch(e){<br>  console.log(‘c’);<br>}<br>finally{<br>  console.log(‘d’);<br>}</p><p>A<br>a c d</p><p>B<br>a b d</p><p>C<br>a b c d</p><p>D<br>a b c</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>当用户输入0时，会导致分母为0。虽然在绝大多数编程语言中，0是不能作为分母，但在js中，0是可以作分母的，0&#x2F;0的结果为NaN，并不会抛出异常，因此会执行try块中所有代码，输出a b，并且由于没有异常的发生不会执行catch块，不管有没有异常，finally块都会执行的，因此最终输出结果为a b d，B选项正确。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>错误处理</p>            </div>              </div>            </details><hr><p>在JavaScript中，以下哪些是原始值（primitive value）？<br>A<br>”3”<br>B<br>10<br>C<br>null<br>D<br>[1]</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>ECMAScript中，变量可以存放两种类型的值，即原始值和引用值。<br>原始值是存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>引用值是存储在堆中的对象，也就是说，存储在变量处的值是一个指针，指向存储对象的内存处。<br>ECMAScript中有5种原始类型，即undefined、null、number、string、boolean。<br>选项中的值分别是：string、number、null，而最后一个是数组，数组是一个对象，所以是引用值。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>变量</p>            </div>              </div>            </details><hr><p>语句var arr&#x3D;[a,b,c,d];执行后，数组arr中每项都是一个整数，下面得到其中最大整数语句正确的是哪几项？<br>A<br>Math.max(arr)<br>B<br>Math.max(arr[0], arr[1], arr[2], arr[3])<br>C<br>Math.max.call(Math, arr[0], arr[1], arr[2], arr[3])<br>D<br>Math.max.apply(Math,arr)</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>Math.max(args…)传入参数是任意数量的值<br>A  传入数组,所以错误<br>B  可以<br>C  Function.call()可以传入任意多个参数,C正确<br>D  Function.apply()第二个参数以数组形式传递,D正确</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>call、apply 区别</p>            </div>              </div>            </details><hr><p>以下哪些表达式的结果为true（）<br>A<br>undefined &#x3D;&#x3D; null<br>B<br>isNaN(“100”)<br>C<br>parseInt(“1a”) &#x3D;&#x3D;&#x3D; 1<br>D<br>[] instanceof Array</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>&#x2F;&#x2F; 1. isNaN()函数用来判断一个数是否是NaN;<br>            &#x2F;&#x2F; 只有一个值是NaN或者能被转换为NaN的时候才返回true<br>            console.log(isNaN(‘e’));&#x2F;&#x2F;true,因为e可以被转换为NaN<br>            console.log(isNaN(‘11’));&#x2F;&#x2F;false,因为字符串可以被转换为数字,不能被转为NaN<br>            console.log(isNaN(null));&#x2F;&#x2F;false,因为null可以被转换为0,不能被转为NaN<br>            console.log(isNaN(NaN));&#x2F;&#x2F; true,NaN返回true</p><pre><code>        // 2. parseInt(string,raix)函数有两个参数        // 2.1 注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分        console.log(parseInt(&#39;223&#39;));//223        // 2.2 当字符串中间存在非数字,那么就只解析前面是数字的部分字符        console.log(parseInt(&#39;22e3&#39;));//22        // 2.3 如果字符串中第一个字符就不是数字,那么返回NaN         console.log(parseInt(&#39;e21&#39;));//NaN                // 对于parseInt()函数还有一个易考点,就是利用数组的下标,还记得parseInt()函数的第二个参数吗？        // 2.4 parseInt()函数的第二个参数指的就是进制,这个参数小于2或者大于36的时候,都会返回NaN         console.log(parseInt(1,1));//NaN ,因为第二个参数是1表示1进制&lt;2,所以错误        console.log(parseInt(1,2));//1,因为表示二进制 =2,在范围内        // 2.5 我们一般都是省略这个参数的,这个时候就是默认为10进制        console.log(parseInt(99));//99        // 2.6 我们第二个参数使用0的时候也是使用十进制        console.log(parseInt(99,0));//99        // 2.7 如果第一个参数前缀使用0x/0X则表示使用16进制        console.log(parseInt(0x99));//153=16*9+9        console.log(parseInt(0x99,10));//如果第一个参数使用了0x表示十六进制,那么第二个参数设置了值也无效                // 2.8 看一个实例,对于数组        var arr=[1,2,3,2,5];        console.log(arr.map(parseInt));//[1, NaN, NaN, 2, NaN]        // arr.map方法就是对于数组arr里面的每一项都去使用方法里面的函数,最后返回新数组        // 因为map方***有索引,所以实际上就是         parseInt(1,0);//1,因为0表示十进制        parseInt(2,1);//1进制&lt;2，所以错啦!        parseInt(3,2);// 2进制,但是3不在0——2范围内(3应该改为11),所以不符合2进制要求        parseInt(2,3);//符合,因为三进制是0-3,而2在范围内        parseInt(5,4);//4进制不包括5,所以NaN</code></pre><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>JavaScript基础</p>            </div>              </div>            </details><hr><p>以下哪些语句触发了隐式的类型转换？<br>A<br>parseInt(12.34, 10)<br>B<br>0 ? 1 : 2<br>C<br>2e1 * 0xaa<br>D<br>1 + ‘1’</p><details class="folding-tag" cyan><summary> 解析 </summary>              <div class='content'>              <p>parseInt() 函数可解析一个字符串，并返回一个整数。<br>所以说，number类型的12.34发生隐式转换为string。<br>三元运算符，会判断?前的表达式为true或者false。所以number类型的0发生了隐式转换为boolean。<br>+运算发生了字符串的隐式转化。原本number类型的1，和string类型的’1’进行了+运算，连接了字符串。返回’11’。<br>C选项：<br>e是js里面指数的一种表示形式。也就是10的多少次方。<br>2e1 等价于 2 *（10^1） &#x3D; 20<br>2e2 等价于 2 <em>（10^2）&#x3D; 200<br>0xaa是16进制的表示方法。相当于十进制的170。<br>这里都是number类型，发生了数字的乘法运算：20</em>170，没有发生类型转换。</p><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>JavaScript基础</p>            </div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 双指针</title>
      <link href="/2022/12/19/%E5%89%91%E6%8C%87%20Offer%20%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2022/12/19/%E5%89%91%E6%8C%87%20Offer%20%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h1><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题可以用很简单的方法实现，比如：</p><blockquote><blockquote><p>const replaceSpace &#x3D; s &#x3D;&gt; s.split(‘ ‘).join(‘%20’);</p></blockquote></blockquote><p>或者直接用 replace 也可以。</p><p>但要我们自己手动实现的话，可以使用双指针解法：</p><p>1.先统计空格数量    </p><p>2.字符串转化为数组，更新数组长度</p><p>3.定义双指针：left:旧长度-1、right:新长度-1</p><p>4.从后往前遍历，如果左指针遇到空格，右指针依次填入%20，并左移 2</p><p>5.如果左指针遇到字符，直接将左指针的值赋给右指针</p><p>6.左指针和右指针还有分别左移 1</p><p>7.最后返回字符串</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：s &#x3D; “We are happy.”<br>输出：”We%20are%20happy.”</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var replaceSpace = function(s) &#123;<br><br>    s = s.split(&#x27;&#x27;)<br><br>        let oldLength = s.length<br>        let spaceCount = 0<br><br>        // 先计算有多少个空格<br>        for(let i=0;i<oldLength;i++)&#123;<br>            if(s[i] === &#x27; &#x27;) spaceCount++<br>        &#125;<br><br>    // 使用新字符串代替旧字符串<br>    s.length += spaceCount*2<br>    for(let i=oldLength-1,j=s.length-1;i>=0;i--,j--)&#123;<br>        if(s[i] !== &#x27; &#x27;) s[j] = s[i]<br>        else&#123;<br>            s[j-2] = &#x27;%&#x27;;<br>            s[j-1] = &#x27;2&#x27;;<br>            s[j] = &#x27;0&#x27;;<br>            j-=2<br><br>         &#125;<br>    &#125;return s.join(&#x27;&#x27;);<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数在数组的前半部分，所有偶数在数组的后半部分。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>1.定义双指针</p><p>2.左指针找偶数，右指针找奇数</p><p>3.交换左右指针的值</p><p>4.循环寻找</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：nums &#x3D; [1,2,3,4]<br>输出：[1,3,2,4]<br>注：[3,1,2,4] 也是正确的答案之一。</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var exchange = function(nums) &#123;<br><br>    let l = 0,r = nums.length - 1<br><br>    while(l<r)&#123;<br>        if(nums[l]%2==0 && nums[r]%2==1)&#123;<br>            let tmp = nums[l]<br>            nums[l] = nums[r]<br>            nums[r] = tmp<br>        &#125;<br><br>        if(nums[l] % 2 === 1) l++<br>        // ?: 右边的应该向左边靠齐<br>        if(nums[r] % 2 === 0) r--<br>    &#125;return nums<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-22-链表中倒数第-k-个节点"><a href="#剑指-Offer-22-链表中倒数第-k-个节点" class="headerlink" title="剑指 Offer 22. 链表中倒数第 k 个节点"></a>剑指 Offer 22. 链表中倒数第 k 个节点</h1><p>输入一个链表，输出该链表中倒数第 k 个节点。为了符合大多数人的习惯，本题从 1 开始计数，即链表的尾节点是倒数第 1 个节点。</p><p>例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>1.定义快慢指针，初始都指向链表头部</p><p>2.快指针先走 k 步</p><p>3.再两指针一起走，直到快指针走到头为止</p><p>4.此时的慢指针指向的就是倒数第 k 个节点</p><p>5.返回慢指针即可</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</p></blockquote></blockquote><blockquote><blockquote><p>返回链表 4-&gt;5.</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var getKthFromEnd = function(head, k) &#123;<br><br>    // 使用双指针方法<br>    let fast = head,slow = head<br><br>    // 先迭代k次，此处注意k反过来 --<br>    while(fast && k>0)&#123;<br>        fast = fast.next<br>        k--<br>    &#125;<br><br>    // 不多解释<br>    while(fast)&#123;<br>        fast = fast.next<br>        slow = slow.next<br>    &#125;<br>    // 注意返回直接slow 就行<br>    return slow<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-25-合并两个排序的链表"><a href="#剑指-Offer-25-合并两个排序的链表" class="headerlink" title="剑指 Offer 25. 合并两个排序的链表"></a>剑指 Offer 25. 合并两个排序的链表</h1><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>1.思路都在注释中，稍微画一下图就懂了</p><p>2.定义一个虚拟节点，最后返回虚拟节点的下一个节点</p><p>3.定义 p1，p2 分别指向两个链表头部，一起遍历</p><p>4.p1 和 p2 哪个对应的值小，哪个就连接到答案链表</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var mergeTwoLists = function(l1, l2) &#123;<br><br>    // 搞一个哨兵节点<br>    const prev = new ListNode(-1)<br><br>    let pre = prev<br>    while(l1 != null && l2 != null)&#123;<br>        // 谁小就把小的节点放在pre的后面<br>        if(l1.val<=l2.val)&#123;<br>            pre.next = l1<br>            l1 = l1.next<br>        &#125;else&#123;<br>            pre.next = l2<br>            l2 = l2.next<br>        &#125;<br>        pre = pre.next<br>    &#125;<br><br>    pre.next = l1 === null ? l2 : l1<br>    // 此处是返回prev<br>    return prev.next<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-57-和为-s-的两个数字"><a href="#剑指-Offer-57-和为-s-的两个数字" class="headerlink" title="剑指 Offer 57. 和为 s 的两个数字"></a>剑指 Offer 57. 和为 s 的两个数字</h1><p>输入一个递增排序的数组和一个数字 s，在数组中查找两个数，使得它们的和正好是 s。如果有多对数字的和等于 s，则输出任意一对即可。</p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p><strong>给的数字数组是升序排列的，故用双指针法求解：</strong></p><p>1.定义双指针分别指向数组头尾，即最小、最大的数</p><p>2.判断左右指针对应的数之和，与目标数的关系</p><p>3.若大于目标数，需要小一点，右指针左移</p><p>4.若小于目标数，需要大一点，左指针右移</p><p>5.若等于目标数，返回这两个数</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[2,7] 或者 [7,2]</p></blockquote></blockquote><blockquote><blockquote><p>输入：nums &#x3D; [10,26,30,31,47,60], target &#x3D; 40<br>输出：[10,30] 或者 [30,10]</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var twoSum = function(nums, target) &#123;<br><br>    let [l,r] = [0,nums.length-1]<br><br>    //?: 因为是递增排序数组,不是乱序<br>    while(l<r)&#123;<br>        // 直接列出和,来缩小l和r的范围<br>        let sum = nums[l] + nums[r]<br>        if(sum > target)&#123;<br>            r--<br>        &#125;else if(sum < target)&#123;<br>            l++<br>        &#125;else&#123;<br>            return [nums[l],nums[r]]<br>        &#125;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-57-II-和为-s-的连续正数序列"><a href="#剑指-Offer-57-II-和为-s-的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为 s 的连续正数序列"></a>剑指 Offer 57 - II. 和为 s 的连续正数序列</h1><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>1.滑动窗口思路，窗口初始化为[1, 2]，初始 sum 为 3</p><p>2.因为输出的序列至少有 2 个数，所以若窗口第一个数大于 target&#x2F;2 时，就不再继续了</p><p>3.若 sum 太小，向窗口添加下一个数，更新 sum</p><p>4.若 sum 太大，弹出窗口第一个数，更新 sum</p><p>5.若 sum&#x3D;&#x3D;&#x3D;target，则将窗口的数放入 res，随后弹出第一个数，继续滑动</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]</p></blockquote></blockquote><blockquote><blockquote><p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var findContinuousSequence = function(target) &#123;<br>// 先把数分解 9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在[1,2,3,4,5]中，不难发现数组最后一个数,如果 target 是偶数就是 target/2,如果是奇数就是 target/2 取整加一，即 Math.floor(target/2)+1 或采用二进制取整(target/2 | 0) + 1。<br>let index = target % 2 === 0 ? target / 2 : (target / 2 | 0) + 1<br><br>    let res = []<br><br>    let temp = []<br><br>    let sum = 0<br><br>    for (let i = 1; i <= index; i++) &#123;<br>        temp.push(i)<br>        sum = sum + i<br><br>        while (sum > target) &#123;<br>            sum -= temp[0]<br>            temp.shift()<br>    &#125;<br><br>    if (sum === target) &#123;<br>      temp.length >= 2 && res.push([...temp])<br>    &#125;<br><br>&#125;<br>return res;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指 Offer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 链表</title>
      <link href="/2022/12/19/%E5%89%91%E6%8C%87%20Offer%20%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/12/19/%E5%89%91%E6%8C%87%20Offer%20%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a>剑指 Offer 06. 从尾到头打印链表</h1><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用一个辅助栈，遍历链表时，先将元素放入辅助栈。</p><p>最后从尾遍历辅助栈。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：head &#x3D; [1,3,2]<br>输出：[2,3,1]</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var reversePrint = function(head,arr = []) &#123;<br><br>    if(head != null)&#123;<br><br>        // 通过递归，反着的属性，先把最后面的数字输入到最前面<br>        if(head.next != null)&#123;<br>            reversePrint(head.next,arr)<br>        &#125;<br>        arr.push(head.val)<br>    &#125;<br>    return arr<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-18-删除链表的节点"><a href="#剑指-Offer-18-删除链表的节点" class="headerlink" title="剑指 Offer 18. 删除链表的节点"></a>剑指 Offer 18. 删除链表的节点</h1><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p><p>返回删除后的链表的头节点。</p><p>注意：此题对比原题有改动</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>1.定义虚拟节点，用指针遍历链表</p><p>2.如果下一个值等于 val，则删除下一个值</p><p>3.使用 ES6 的?.运算符，判断 p 是否存在</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入: head &#x3D; [4,5,1,9], val &#x3D; 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote></blockquote><blockquote><blockquote><p>输入: head &#x3D; [4,5,1,9], val &#x3D; 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var deleteNode = function(head, val) &#123;<br><br>    // 递归终止条件： head为空<br>    if(head === null)  return head<br><br>    // 删除节点 => 返回下一节点<br>    if(head.val === val)  return head.next<br><br>    // 使用递归<br>    head.next = deleteNode(head.next,val)<br>    return head<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a>剑指 Offer 24. 反转链表</h1><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>指针遍历链表，边遍历边改变指向。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var reverseList = function(head) &#123;<br><br>    // 看到反转，首先想到递归<br>    if(!head || !head.next)  return head<br><br>    // let 能加速？<br>    let res = reverseList(head.next)<br><br>    // *反转规则:  将head.next 的 next指针 指向 head<br>    head.next.next = head<br>    // 断开 原有指向<br>    head.next = null<br><br>    return res<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-25-合并两个排序的链表"><a href="#剑指-Offer-25-合并两个排序的链表" class="headerlink" title="剑指 Offer 25. 合并两个排序的链表"></a>剑指 Offer 25. 合并两个排序的链表</h1><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>1.思路都在注释中，稍微画一下图就懂了</p><p>2.定义一个虚拟节点，最后返回虚拟节点的下一个节点</p><p>3.定义 p1，p2 分别指向两个链表头部，一起遍历</p><p>4.p1 和 p2 哪个对应的值小，哪个就连接到答案链表</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var mergeTwoLists = function(l1, l2) &#123;<br><br>    // 搞一个哨兵节点<br>    const prev = new ListNode(-1)<br><br>    let pre = prev<br>    while(l1 != null && l2 != null)&#123;<br>        // 谁小就把小的节点放在pre的后面<br>        if(l1.val<=l2.val)&#123;<br>            pre.next = l1<br>            l1 = l1.next<br>        &#125;else&#123;<br>            pre.next = l2<br>            l2 = l2.next<br>        &#125;<br>        pre = pre.next<br>    &#125;<br><br>    pre.next = l1 === null ? l2 : l1<br>    // 此处是返回prev<br>    return prev.next<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-57-和为-s-的两个数字"><a href="#剑指-Offer-57-和为-s-的两个数字" class="headerlink" title="剑指 Offer 57. 和为 s 的两个数字"></a>剑指 Offer 57. 和为 s 的两个数字</h1><p>输入一个递增排序的数组和一个数字 s，在数组中查找两个数，使得它们的和正好是 s。如果有多对数字的和等于 s，则输出任意一对即可。</p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p><strong>给的数字数组是升序排列的，故用双指针法求解：</strong></p><p>1.定义双指针分别指向数组头尾，即最小、最大的数</p><p>2.判断左右指针对应的数之和，与目标数的关系</p><p>3.若大于目标数，需要小一点，右指针左移</p><p>4.若小于目标数，需要大一点，左指针右移</p><p>5.若等于目标数，返回这两个数</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[2,7] 或者 [7,2]</p></blockquote></blockquote><blockquote><blockquote><p>输入：nums &#x3D; [10,26,30,31,47,60], target &#x3D; 40<br>输出：[10,30] 或者 [30,10]</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var twoSum = function(nums, target) &#123;<br><br>    let [l,r] = [0,nums.length-1]<br><br>    //?: 因为是递增排序数组,不是乱序<br>    while(l<r)&#123;<br>        // 直接列出和,来缩小l和r的范围<br>        let sum = nums[l] + nums[r]<br>        if(sum > target)&#123;<br>            r--<br>        &#125;else if(sum < target)&#123;<br>            l++<br>        &#125;else&#123;<br>            return [nums[l],nums[r]]<br>        &#125;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-57-II-和为-s-的连续正数序列"><a href="#剑指-Offer-57-II-和为-s-的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为 s 的连续正数序列"></a>剑指 Offer 57 - II. 和为 s 的连续正数序列</h1><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>1.滑动窗口思路，窗口初始化为[1, 2]，初始 sum 为 3</p><p>2.因为输出的序列至少有 2 个数，所以若窗口第一个数大于 target&#x2F;2 时，就不再继续了</p><p>3.若 sum 太小，向窗口添加下一个数，更新 sum</p><p>4.若 sum 太大，弹出窗口第一个数，更新 sum</p><p>5.若 sum&#x3D;&#x3D;&#x3D;target，则将窗口的数放入 res，随后弹出第一个数，继续滑动</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><blockquote><blockquote><p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]</p></blockquote></blockquote><blockquote><blockquote><p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var findContinuousSequence = function(target) &#123;<br>// 先把数分解 9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在[1,2,3,4,5]中，不难发现数组最后一个数,如果 target 是偶数就是 target/2,如果是奇数就是 target/2 取整加一，即 Math.floor(target/2)+1 或采用二进制取整(target/2 | 0) + 1。<br>let index = target % 2 === 0 ? target / 2 : (target / 2 | 0) + 1<br><br>    let res = []<br><br>    let temp = []<br><br>    let sum = 0<br><br>    for (let i = 1; i <= index; i++) &#123;<br>        temp.push(i)<br>        sum = sum + i<br><br>        while (sum > target) &#123;<br>            sum -= temp[0]<br>            temp.shift()<br>    &#125;<br><br>    if (sum === target) &#123;<br>      temp.length >= 2 && res.push([...temp])<br>    &#125;<br><br>&#125;<br>return res;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指 Offer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 二分查找</title>
      <link href="/2022/12/18/%E5%89%91%E6%8C%87%20Offer%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/12/18/%E5%89%91%E6%8C%87%20Offer%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a>剑指 Offer 04. 二维数组中的查找</h1><p>在一个 n * m 的二维数组中，每一行都按照从左到右<strong>非递减</strong>的顺序排序，每一列都按照从上到下<strong>非递减</strong>的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><strong>类似二分查找的做法：</strong></p><p>1.从左下角开始寻找，因为左下角的元素是当前行最小的、当前列最大的</p><p>2.比较元素，如果太大了，上移一行</p><p>3.如果太小了，右移一列</p><p>4.找到就返回 true</p><p>5.遍历完，返回 false</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>现有矩阵 matrix 如下：</p></blockquote><blockquote><blockquote><p>[<br>[1, 4, 7, 11, 15],<br>[2, 5, 8, 12, 19],<br>[3, 6, 9, 16, 22],<br>[10, 13, 14, 17, 24],<br>[18, 21, 23, 26, 30]<br>]</p></blockquote></blockquote><blockquote><p>给定 target &#x3D; 5，返回 true。</p></blockquote><blockquote><p>给定 target &#x3D; 20，返回 false。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var findNumberIn2DArray = function(matrix, target) &#123;<br>// 基础工作<br>if(!matrix.length) return false<br><br>    let x = matrix.length - 1,y = 0<br>    while(x>=0 && y <= matrix[0].length)&#123;<br>        // 如果相等<br>        if(matrix[x][y] === target)&#123;<br>            return true<br>        // 如果比它大，往上移一位<br>        &#125;else if(matrix[x][y] > target)&#123;<br>            x--<br>        // 如果比他小，往右移一为<br>        &#125;else&#123;<br>            y++<br>        &#125;<br>    &#125;return false<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a>剑指 Offer 11. 旋转数组的最小数字</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在<strong>重复</strong>元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的<strong>最小元素</strong>。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。</p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入：numbers &#x3D; [3,4,5,1,2]<br>输出：1</p></blockquote><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入：numbers &#x3D; [2,2,2,0,1]<br>输出：0</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>1.用二分查找即可</p><p>2.若 mid 大于 high 的数，则最小值一定在 mid 右侧</p><p>3.若 mid 小于 high 的数，则最小值有两种可能：(1)最小值在 mid 最侧(2)mid 就是最小值</p><p>4.若 mid 等于 high 的数，high–</p><p>5.最后返回 low 所在的数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var minArray = function(numbers) &#123;<br>let low = 0<br>let hign = numbers.length-1<br>while(low<hign)&#123;<br>const pivot = low + Math.floor((hign-low)/2)<br><br>        if(numbers[pivot]<numbers[hign])&#123;<br>            hign = pivot<br>        &#125;else if(numbers[pivot]>numbers[hign])&#123;<br>            // 针对示例1<br>            low = pivot + 1;<br>        &#125;else &#123;<br>           high -= 1;<br>        &#125;<br>    &#125;<br>    return numbers[low];<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a>剑指 Offer 53 - I. 在排序数组中查找数字 I</h1><p>统计一个数字在排序数组中出现的次数。</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8<br>输出: 2</p></blockquote><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6<br>输出: 0</p></blockquote><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>已经排序好的数组，推荐使用二分搜索。</p><p>先用二分搜索找到目标数的一个索引，再从两边扩散，统计数量。</p><p>若二分查找没找到目标数，直接返回 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">const search = (nums, target)=>&#123;<br>let [low,hign,flag] = [0,nums.length-1,null]<br><br>    while(low<=hign)&#123;<br>        const mid = (low+hign) >> 1<br>        const midNums = nums[mid]<br>        if(midNums>target)&#123;<br>            // midNums大于target,low向中间缩小范围<br>            hign = mid -1<br>        &#125;else if(midNums<target)&#123;<br>            // midNum小于target,hign向中缩小范围<br>            low = mid + 1<br>        &#125;else&#123;<br>            flag = mid<br>            break<br>        &#125;<br>    &#125;<br>    if(flag === null) return 0<br><br>    low = hign = flag<br>    while(nums[low-1] === target) low--<br>    while(nums[hign+1] === target) hign++<br>    return hign-low+1<br><br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="剑指-Offer-53-I-在排序数组中查找数字-I-1"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I-1" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a>剑指 Offer 53 - I. 在排序数组中查找数字 I</h1><p>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0 ～ n-1 之内。在范围 0 ～ n-1 内的 n 个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入: 输入: [0,1,3]<br>输出: 2</p></blockquote><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><blockquote><p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8</p></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>有序数组 ——&gt; 二分查找</p><p>nums[mid] &#x3D;&#x3D;&#x3D; mid：左半边完整，缩小范围，开始找右半边</p><p>nums[mid] !&#x3D;&#x3D; mid：左半边不完整，缩小范围，在左半边找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class=" language-hljs plaintext"><code class="language-hljs plaintext">var missingNumber = function(nums) &#123;<br>// 递增排序数组,第一想的就应该是 二分法<br>let [low,hign] = [0,nums.length-1]<br><br>    while(low<=hign)&#123;<br>        let mid = (low + hign) >> 1<br>        if(nums[mid] == mid)&#123;<br>            low = mid + 1<br>        &#125;else&#123;<br>            hign = mid - 1<br>        &#125;<br>    &#125;return low<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指 Offer </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/2022/11/17/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2022/11/17/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h2><p>添加 Aplayer 音乐播放器,并添加了全局吸底</p><p>代码高亮优化，加好看的边框</p><h2 id="12-19"><a href="#12-19" class="headerlink" title="12.19"></a>12.19</h2><p>剑指 Offer 双指针</p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/-data/link.json"/>
      <url>/-data/link.json</url>
      
        <content type="html"><![CDATA[null]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>便携小空调 - 为你的夏日带去清凉!</title>
      <link href="/air-conditioner/index.html"/>
      <url>/air-conditioner/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>终于为博客安装上了便携小空调</p></blockquote><style>.copyright-box a {  border-bottom: none !important;  padding: 0 !important;}</style><div id="air-conditioner-vue"></div><script defer data-pjax src='https://alist.anzhiy.cn/d/anzhiyu/air-conditioner-dev/index.2d8c3a3f.js'></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/Kimbiedark.css"/>
      <url>/css/Kimbiedark.css</url>
      
        <content type="html"><![CDATA[/*    Name:     Kimbie (dark)    Author:   Jan T. Sott    License:  Creative Commons Attribution-ShareAlike 4.0 Unported License    URL:      https://github.com/idleberg/Kimbie-highlight.js*//* 新添加的内容  -------------------------------------   --hl-color                  代码框字体顔色 【必须】 (把下面.hljs的 color复制到这里来)  --hl-bg                     代码框背景色 【必须】 (把下面.hljs的 background复制到这里来)  --hltools-bg: #321a0f       代码框顶部工具栏背景色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）  --hltools-color: #fff       代码框顶部工具栏字体顔色 【可选】(如果你关掉了 copy、lang 和 shrink,可不用配置这个）  --hlnumber-bg: #221a0f      代码框行数背景色 【可选】(如果已经关掉 line_number,可以不用配置这个)  --hlnumber-color: #fff      代码框行数字体顔色 【可选】 (如果已经关掉 line_number,可以不用配置这个)  --hlscrollbar-bg: #d3af86   代码框滚动条顔色 【可选】（默认为主题主顔色）  --hlexpand-bg: #d3af86      代码框底部展开背景色 【可选】(如果已经关掉 highlight_height_limit,可以不用配置这个)*/:root {    --hl-color: #d3af86;    --hl-bg: #221a0f;    --hltools-bg: #321a0f;    --hltools-color: #fff;    --hlnumber-bg: #221a0f;    --hlnumber-color: #fff;    --hlscrollbar-bg: #d3af86;    --hlexpand-bg: #d3af86;  }    /* Kimbie Comment */  .hljs-comment,  .hljs-quote {    color: #d6baad;  }    /* Kimbie Red */  .hljs-variable,  .hljs-template-variable,  .hljs-tag,  .hljs-name,  .hljs-selector-id,  .hljs-selector-class,  .hljs-regexp,  .hljs-meta {    color: #dc3958;  }    /* Kimbie Orange */  .hljs-number,  .hljs-built_in,  .hljs-builtin-name,  .hljs-literal,  .hljs-type,  .hljs-params,  .hljs-deletion,  .hljs-link {    color: #f79a32;  }    /* Kimbie Yellow */  .hljs-title,  .hljs-section,  .hljs-attribute {    color: #f06431;  }    /* Kimbie Green */  .hljs-string,  .hljs-symbol,  .hljs-bullet,  .hljs-addition {    color: #889b4a;  }    /* Kimbie Purple */  .hljs-keyword,  .hljs-selector-tag,  .hljs-function {    color: #98676a;  }    /* 更改的内容 把.hljs改为 #article-container figure.highlight .hljs *、  /* ------------------------------------- */  #article-container figure.highlight .hljs {    display: block;    overflow-x: auto;    background: #221a0f;    color: #d3af86;    padding: 0.5em;  }    .hljs-emphasis {    font-style: italic;  }    .hljs-strong {    font-weight: bold;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/OneGraph.css"/>
      <url>/css/OneGraph.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/flipcountdown.css"/>
      <url>/css/flipcountdown.css</url>
      
        <content type="html"><![CDATA[.xdsoft_flipcountdown{display:inline-block;}.xdsoft_flipcountdown .xdsoft_digit{float:left;background-repeat:no-repeat;}.xdsoft_flipcountdown .xdsoft_clearex{clear:both;float:none;}.xdsoft_flipcountdown .xdsoft_digit{background-position:0px 0px;}.xdsoft_flipcountdown .xdsoft_digit.xdsoft_separator,.xdsoft_flipcountdown .xdsoft_digit.xdsoft_dot{opacity:0.9;}.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit{width:53px;height:76px;background-image:url(/img/digit-lg.png);}.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit.xdsoft_space,.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit.xdsoft_separator,.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit.xdsoft_dot{width:14px;background-position:-19px -4620px;}.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit.xdsoft_dot{background-position:-41px -4620px;}.xdsoft_flipcountdown.xdsoft_size_lg .xdsoft_digit.xdsoft_space{background-position:-100px -4620px;}.xdsoft_flipcountdown.xdsoft_size_md .xdsoft_digit{width:36px;height:51px;background-image:url(/img/digit-md.png);}.xdsoft_flipcountdown.xdsoft_size_md .xdsoft_digit.xdsoft_space,.xdsoft_flipcountdown.xdsoft_size_md .xdsoft_digit.xdsoft_separator,.xdsoft_flipcountdown.xdsoft_size_md .xdsoft_digit.xdsoft_dot{width:10px;background-position:-13px -3120px;}.xdsoft_flipcountdown.xdsoft_size_sm .xdsoft_digit{width:24px;height:34px;background-image:url(/img/digit-sm.png);}.xdsoft_flipcountdown.xdsoft_size_sm .xdsoft_digit.xdsoft_space,.xdsoft_flipcountdown.xdsoft_size_sm .xdsoft_digit.xdsoft_separator,.xdsoft_flipcountdown.xdsoft_size_sm .xdsoft_digit.xdsoft_dot{width:10px;background-position:-6px -2100px;}.xdsoft_flipcountdown.xdsoft_size_xs .xdsoft_digit{width:16px;height:23px;background-image:url(/img/digit-xs.png);}.xdsoft_flipcountdown.xdsoft_size_xs .xdsoft_digit.xdsoft_space,.xdsoft_flipcountdown.xdsoft_size_xs .xdsoft_digit.xdsoft_separator,.xdsoft_flipcountdown.xdsoft_size_xs .xdsoft_digit.xdsoft_dot{width:5px;background-position:-5px -1440px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 一级菜单居中 */#nav .menus_items {    position: absolute !important;    width: fit-content !important;    left: 50% !important;    transform: translateX(-50%) !important;  }  /* 子菜单横向展示 */  #nav .menus_items .menus_item:hover .menus_item_child {    display: flex !important;  }  /* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */  .menus_items .menus_item:nth-child(2) .menus_item_child {    left: -125px;  }  /* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 颜色 */:root {  --anzhiyu-theme-op: #4259ef23;  --anzhiyu-card-bg-none: rgba(255, 255, 255, 0);  --anzhiyu-main-op-deep: var(--anzhiyu-theme-op-deep) !important;  --anzhiyu-gray-op: #9999992b;  --anzhiyu-theme-top: var(--anzhiyu-theme);  --anzhiyu-white: #fff;  --anzhiyu-white-op: rgba(255, 255, 255, 0.2);  --anzhiyu-black: #000;  --anzhiyu-black-op: rgba(0, 0, 0, 0.2);  --anzhiyu-none: rgba(0, 0, 0, 0);  --anzhiyu-gray: #999999;  --anzhiyu-yellow: #ffc93e;  --anzhiyu-orange: #e38100;  --anzhiyu-border-radius: 8px;  --anzhiyu-main: var(--anzhiyu-theme);  --anzhiyu-main-op: var(--anzhiyu-theme-op);  --anzhiyu-shadow-theme: 0 8px 12px -3px var(--anzhiyu-theme-op);  --anzhiyu-shadow-main: 0 8px 12px -3px var(--anzhiyu-main-op);  --anzhiyu-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2);  --anzhiyu-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2);  --anzhiyu-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05);  --anzhiyu-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12);  --anzhiyu-shadow-red: 0 8px 12px -3px #ee7d7936;  --anzhiyu-shadow-green: 0 8px 12px -3px #87ee7936;  --anzhiyu-shadow-border: 0 8px 16px -4px #2c2d300c;  --anzhiyu-shadow-blackdeep: 0 2px 16px -3px rgba(0, 0, 0, 0.15);  --anzhiyu-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%);  --style-border: 1px solid var(--anzhiyu-card-border);  --anzhiyu-blue-main: #3b70fc;  --style-border-hover: 1px solid var(--anzhiyu-main);  --style-border-dashed: 1px dashed var(--anzhiyu-theme-op);  --style-border-avatar: 4px solid var(--anzhiyu-background);  --style-border-always: 1px solid var(--anzhiyu-card-border);  --style-border-none: 1px solid transparent;  --anzhiyu-white-acrylic1: #fefeff !important;  --anzhiyu-white-acrylic2: #fcfdff !important;  --anzhiyu-black-acrylic2: #08080a !important;  --anzhiyu-black-acrylic1: #0b0b0e !important;  --anzhiyu-main-none: #b8b8b800 !important;}[data-theme="light"] {  --anzhiyu-theme-op-deep: #4259efdd;  --global-bg: #f7f9fe;  --anzhiyu-theme: #3b70fc;  --anzhiyu-theme-deep: #1856fb;  --anzhiyu-theme-op: #4259ef23;  --anzhiyu-blue: #3b70fc;  --anzhiyu-red: #d8213c;  --anzhiyu-pink: #ff7c7c;  --anzhiyu-green: #57bd6a;  --anzhiyu-fontcolor: #363636;  --anzhiyu-background: #f7f9fe;  --anzhiyu-reverse: #000;  --anzhiyu-maskbg: rgba(255, 255, 255, 0.6);  --anzhiyu-maskbgdeep: rgba(255, 255, 255, 0.85);  --anzhiyu-hovertext: var(--anzhiyu-theme);  --anzhiyu-ahoverbg: #f7f7fa;  --anzhiyu-lighttext: var(--anzhiyu-main);  --anzhiyu-secondtext: rgba(60, 60, 67, 0.6);  --anzhiyu-scrollbar: rgba(60, 60, 67, 0.4);  --anzhiyu-card-btn-bg: #edf0f7;  --anzhiyu-post-blockquote-bg: #fafcff;  --anzhiyu-post-tabs-bg: #f2f5f8;  --anzhiyu-secondbg: #f1f3f8;  --anzhiyu-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05);  --anzhiyu-card-bg: #fff;  --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-card-border: #e3e8f7;}[data-theme="dark"] {  --anzhiyu-theme-op-deep: #0084ffdd;  --global-bg: #18171d;  --anzhiyu-theme: #0084ff;  --anzhiyu-theme-deep: #0076e5;  --anzhiyu-theme-op: #0084ff23;  --anzhiyu-blue: #0084ff;  --anzhiyu-red: #ff3842;  --anzhiyu-pink: #ff7c7c;  --anzhiyu-green: #57bd6a;  --anzhiyu-fontcolor: #f7f7fa;  --anzhiyu-background: #18171d;  --anzhiyu-reverse: #fff;  --anzhiyu-maskbg: rgba(0, 0, 0, 0.6);  --anzhiyu-maskbgdeep: rgba(0, 0, 0, 0.85);  --anzhiyu-hovertext: #0a84ff;  --anzhiyu-ahoverbg: #fff;  --anzhiyu-lighttext: #f2b94b;  --anzhiyu-secondtext: #a1a2b8;  --anzhiyu-scrollbar: rgba(200, 200, 223, 0.4);  --anzhiyu-card-btn-bg: #30343f;  --anzhiyu-post-blockquote-bg: #000;  --anzhiyu-post-tabs-bg: #121212;  --anzhiyu-secondbg: #30343f;  --anzhiyu-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4);  --anzhiyu-card-bg: #1d1b26;  --anzhiyu-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0);  --anzhiyu-card-border: #42444a;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}svg.icon {  width: 1em; height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: var(--theme-color);  border-radius: 8px;  opacity: 0.6;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0.3;}#cursor.hover {  opacity: 0.6;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.7;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}#cursor {  /* 这里改变跟随的底色 */  background: rgb(23, 177, 208);}@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/优设好身体.woff2);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: block;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/progress_bar.css"/>
      <url>/css/progress_bar.css</url>
      
        <content type="html"><![CDATA[.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2670477428" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyu.js"/>
      <url>/js/anzhiyu.js</url>
      
        <content type="html"><![CDATA[var anzhiyu_musicPlaying = false;var anzhiyu_musicStretch = false;var anzhiyu_musicFirst = false;var anzhiyu = {  //切换音乐播放状态  musicToggle: function (changePaly = true) {    if (!anzhiyu_musicFirst) {      musicBindEvent();      anzhiyu_musicFirst = true;    }    let msgPlay = '<i class="fa-solid fa-play"></i><span>播放音乐</span>'; // 此處可以更改為你想要顯示的文字    let msgPause = '<i class="fa-solid fa-pause"></i><span>暂停音乐</span>'; // 同上，但兩處均不建議更改    if (anzhiyu_musicPlaying) {      document.querySelector("#nav-music").classList.remove("playing");      document.getElementById("menu-music-toggle").innerHTML = msgPlay;      document.getElementById("nav-music-hoverTips").innerHTML = "音乐已暂停";      document.querySelector("#consoleMusic").classList.remove("on");      anzhiyu_musicPlaying = false;      document.querySelector("#nav-music").classList.remove("stretch");      anzhiyu_musicStretch = false;    } else {      document.querySelector("#nav-music").classList.add("playing");      document.getElementById("menu-music-toggle").innerHTML = msgPause;      document.querySelector("#consoleMusic").classList.add("on");      anzhiyu_musicPlaying = true;      document.querySelector("#nav-music").classList.add("stretch");      anzhiyu_musicStretch = true;    }    if (changePaly) document.querySelector("#nav-music meting-js").aplayer.toggle();  },  // 音乐伸缩  musicTelescopic: function () {    if (anzhiyu_musicStretch) {      document.querySelector("#nav-music").classList.remove("stretch");      anzhiyu_musicStretch = false;    } else {      document.querySelector("#nav-music").classList.add("stretch");      anzhiyu_musicStretch = true;    }  },  //音乐上一曲  musicSkipBack: function () {    document.querySelector("#nav-music meting-js").aplayer.skipBack();  },  //音乐下一曲  musicSkipForward: function () {    document.querySelector("#nav-music meting-js").aplayer.skipForward();  },  //获取音乐中的名称  musicGetName: function () {    var x = $(".aplayer-title");    var arr = [];    for (var i = x.length - 1; i >= 0; i--) {      arr[i] = x[i].innerText;    }    return arr[0];  },};addRightMenuClickEvent();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/anzhiyufunction.js"/>
      <url>/js/anzhiyufunction.js</url>
      
        <content type="html"><![CDATA[// 音乐绑定事件function musicBindEvent() {    document.querySelector("#nav-music .aplayer-music").addEventListener("click", function () {      anzhiyu.musicTelescopic();    });    document.querySelector("#nav-music .aplayer-button").addEventListener("click", function () {      anzhiyu.musicToggle(false);    });  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/codeblock.js"/>
      <url>/js/codeblock.js</url>
      
        <content type="html"><![CDATA[hexo.extend.filter.register('after_post_render', function (data) {    while (/<figure class="highlight ([a-zA-Z\+\-\/\#]+)">.*?<\/figure>/.test(data.content)) {        data.content = data.content.replace(/<figure class="highlight ([a-zA-Z\+\-\/\#]+)">.*?<\/figure>/, function () {            var language = RegExp.$1 || 'code'            var lastMatch = RegExp.lastMatch            if (language=='plain'){                language='code';            }            lastMatch = lastMatch.replace(/<figure class="highlight /, '<figure class="iseeu highlight ')            return '<div class="highlight-wrap" data-rel="'                + language.replace(language[0],language[0].toUpperCase()) + '">' + lastMatch + '</div>'        })    }    return data})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/flipcountdown.js"/>
      <url>/js/flipcountdown.js</url>
      
        <content type="html"><![CDATA[/** * @preserve jQuery flipcountdown plugin v3.0.4 * @homepage http://xdsoft.net/jqplugins/flipcountdown/ * (c) 2013, Chupurnov Valeriy. */(function($){    jQuery.fn.flipCountDown = jQuery.fn.flipcountdown = function( _options ){        var default_options = {                showHour:true,                showMinute:true,                showSecond:true,                am:false,                    tzoneOffset:0,                speedFlip:60,                period:1000,                tick:function(){                                return new Date();                            },                autoUpdate:true,                size:'md'            },                sizes = {                lg:77,                md:52,                sm:35,                xs:24            },                createFlipCountDown = function( $box ){                var $flipcountdown = $('<div class="xdsoft_flipcountdown"></div>'),                    $clearex = $('<div class="xdsoft_clearex"></div>'),                         options = $.extend({},default_options),                        timer = 0,                        _animateRange = function( box,a,b ){                        _animateOne( box,a,(a>b&&!(a==9&&b==0))?-1:1,!(a==9&&b==0)?Math.abs(a-b):1 );                    },                        _animateOne = function( box,a,arrow,range ){                        if( range<1 )                            return;                            _setMargin(box,-(a*6*sizes[options.size]+1),1,arrow,function(){                            _animateOne(box,a+arrow,arrow,range-1);                        },range);                    },                        _setMargin = function( box, marginTop, rec, arrow,callback,range){                        if( marginTop<=-sizes[options.size]*60 )                            marginTop = -1;                        box.css('background-position','0px '+marginTop+'px' );                        if( rec<=6 ){                            setTimeout(function(){                                _setMargin(box, marginTop-arrow*sizes[options.size], ++rec, arrow, callback,range);                            },parseInt(options.speedFlip/range));                        }else                            callback();                    },                        blocks = [],                        _typeCompare= function ( a,b ){                        return a&&b&&(                                    (a==b)||                                    (/^[0-9]+$/.test(a+''+b))||                                    (/^[:.\s]+$/.test(a+''+b))                                );                    },                        _generate = function( chars ){                        if( !(chars instanceof Array) || !chars.length )                            return false;                        for( var i = 0, n = chars.length;i<n;i++ ){                            if( !blocks[i] ){                                blocks[i] = $('<div class="xdsoft_digit"></div>');                                $clearex.before(blocks[i]);                            }                            if( blocks[i].data('value')!=chars[i] ){                                if( !_typeCompare(blocks[i].data('value'),chars[i]) ){                                    blocks[i]                                        .removeClass('xdsoft_separator')                                        .removeClass('xdsoft_dot');                                    switch( chars[i] ){                                        case ':':blocks[i].addClass('xdsoft_separator');break;                                        case '.':blocks[i].addClass('xdsoft_dot');break;                                        case ' ':blocks[i].addClass('xdsoft_space');break;                                    }                                }                                if( !isNaN(chars[i]) ){                                    var old = parseInt(blocks[i].data('value')),                                        ii = parseInt(blocks[i].data('i')),                                        crnt = parseInt(chars[i]);                                    if( isNaN(old)||i!=ii ){                                        old = (crnt-1)<0?9:crnt-1;                                    }                                    _animateRange(blocks[i],old,crnt);                                }                                blocks[i].data('value',chars[i]);                                blocks[i].data('i',i);                            }                        }                        if( blocks.length>chars.length ){                            for(;i<blocks.length;i++ ){                                blocks[i][0].parentNode.removeChild(blocks[i][0]);                                delete blocks[i];                            }                            blocks.splice(chars.length);                        }                        },                        counter = 0,                        _calcMoment = function(){                        var value = '1',chars = [];                        if(options.tick)                            value = (options.tick instanceof Function)?options.tick.call($box,counter):options.tick;                            if( typeof value!=='undefined' ){                            switch( value.constructor ){                                case Date:                                    var h = (value.getHours()+options.tzoneOffset)%(options.am?12:24);                                        if( options.showHour ){                                        chars.push(parseInt(h/10));                                        chars.push(h%10);                                    }                                        if( options.showHour && (options.showMinute || options.showSecond) )                                        chars.push(':');                                        if( options.showMinute ){                                        chars.push(parseInt(value.getMinutes()/10));                                        chars.push(value.getMinutes() % 10);                                    }                                        if( options.showMinute && options.showSecond )                                        chars.push(':');                                        if( options.showSecond ){                                        chars.push(parseInt(value.getSeconds()/10));                                        chars.push(value.getSeconds() % 10);                                    }                                break;                                case String:                                    chars = value.replace(/[^0-9\:\.\s]/g,'').split('');                                break;                                case Number:                                    chars = value.toString().split('');                                break;                            }                            _generate(chars);                        }                    };                    $flipcountdown                    .append($clearex)                    .on('xdinit.xdsoft',function(){                        clearInterval(timer);                        if( options.autoUpdate )                            timer = setInterval( _calcMoment,options.period );                        _calcMoment();                    });                    $box.data('setOptions',function( _options ){                    options = $.extend({},options,_options);                    if( !sizes[options.size] )                        options.size = 'lg';                    $flipcountdown                        .addClass('xdsoft_size_'+options.size)                        .trigger('xdinit.xdsoft');                });                $box.append($flipcountdown);            };        return this.each(function(){            var $box = $(this);            if( !$box.data('setOptions') ){                $box.addClass('xdsoft')                createFlipCountDown($box);            }            $box.data('setOptions')&&                $.isFunction($box.data('setOptions'))&&                    $box.data('setOptions')(_options);        });    }    })(jQuery);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4895239160" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[$(function(){    var NY = Math.round((new Date('4/17/2019 00:00:00')).getTime()/1000); //Date修改为你的建站时间。    $('#runtime').flipcountdown({      size:"xs",//可以自定义翻页计时器大小。从大到小依次是lg、md、sm、xs。      tick:function(){        var nol = function(h){          return h>9?h:'0'+h;        }        varrange  = Math.abs(Math.round((new Date()).getTime()/1000)-NY),          secday = 86400, sechour = 3600,          days = parseInt(range/secday),          hours= parseInt((range%secday)/sechour),          min= parseInt(((range%secday)%sechour)/60),          sec= ((range%secday)%sechour)%60;        return nol(days)+' '+nol(hours)+' '+nol(min)+' '+nol(sec);      }    });  });]]></content>
      
    </entry>
    
    
  
</search>
